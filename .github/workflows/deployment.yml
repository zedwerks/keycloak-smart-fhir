name: Deploy Keycloak
on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag"
        required: true
        default: "latest"
      target_environment:
        description: "Target Environment"
        required: true
        default: "demo"
env:
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
  REGISTRY_URL: "https://registry.digitalocean.com/zedwerks"
  REGISTRY: registry.digitalocean.com/zedwerks
  IMAGE_NAME: keycloak-smart-fhir
  CONTAINER_NAME: keycloak-smart-fhir
  DROPLET_NAME: smart-on-fhir
  DROPLET_REGION: tor1
  DROPLET_SIZE: s-1vcpu-1gb
  DROPLET_IP: "blank"
  droplet_exists: "false"
  IMAGE_TAG: ${{ inputs.image_tag }}
  KEYCLOAK_HOSTNAME_URL: ${{ vars.KEYCLOAK_HOSTNAME_URL }}
  KEYCLOAK_TARGET_REALM: ${{ vars.KEYCLOAK_TARGET_REALM }}
  KEYCLOAK_TERRAFORM_CLIENT_ID: 'terraform'

jobs:
   droplet:
    name: Create Droplet, if not exists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

      - name: Check if droplet exists
        id: check_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          if doctl compute droplet list --no-header --format Name | grep -q "^$DROPLET_NAME$"; then
            echo "Droplet already exists."
            echo "droplet_exists=true" >> $GITHUB_ENV
          else
            echo "Droplet does not exist."
            echo "droplet_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Droplet if needed
        if: env.droplet_exists == 'false'
        id: create_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
          DROPLET_REGION: ${{ env.DROPLET_REGION }}
          DROPLET_SIZE: ${{ env.DROPLET_SIZE }}
        run: |
          doctl compute droplet create $DROPLET_NAME \
            --verbose \
            --region $DROPLET_REGION \
            --size $DROPLET_SIZE \
            --image docker-20-04 \
            --ssh-keys $DO_S

   deploy:
    name: Deploy to Digital Ocean Droplet
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: droplet
    environment: ${{ inputs.target_environment }}
    
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get Droplet IP
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          DROPLET_IP=$(doctl compute droplet list --no-header --format Name,PublicIPv4 | grep "$DROPLET_NAME" | awk '{print $2}')
          echo "DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Set environment
        run: echo "Deploying to ${{ inputs.target_environment }} environment"

      - name: Log in to DigitalOcean Container Registry with short-lived token
        run: doctl registry login --expiry-seconds 600

      - name: Docker registry login
        run: docker login ${{ env.REGISTRY }}

      - name: Install Certbot on Droplet
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            # Install Certbot for SSL certificate generation (if using Let's Encrypt)
            if ! command -v certbot &> /dev/null
            then
              apt-get update
              apt-get install -y certbot
            fi

      - name: Create Certificate for HTTPS
        uses: appleboy/ssh-action@v1.1.0
        env: 
          DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
          EMAIL: brad@zedwerks.com
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: DOMAIN_NAME, EMAIL
          script: |
            # poke the firewall of the droplet
            ufw allow 80
            ufw allow 443

            # Generate SSL certificate using Certbot
            certbot certonly --standalone -d $DOMAIN_NAME --non-interactive --agree-tos -m $EMAIL
            certbot renew --quiet
            chmod 655 /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem
            chmod 655 /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem

      - name: Deploy Keycloak with HTTPS
        uses: appleboy/ssh-action@v1.1.0
        env:
          DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_HOSTNAME_URL: ${{ env.KEYCLOAK_HOSTNAME_URL }}
          KEYCLOAK_TARGET_REALM: ${{ env.KEYCLOAK_TARGET_REALM }}
          KEYCLOAK_TERRAFORM_CLIENT_ID: ${{ env.KEYCLOAK_TERRAFORM_CLIENT_ID }}
          KEYCLOAK_TERRAFORM_CLIENT_SECRET: ${{ secrets.KEYCLOAK_TERRAFORM_CLIENT_SECRET }}
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: DOMAIN_NAME, DOCKER_IMAGE, DOCKER_REGISTRY, CONTAINER_NAME, KEYCLOAK_ADMIN_PASSWORD, KEYCLOAK_HOSTNAME_URL, KEYCLOAK_TARGET_REALM, KEYCLOAK_TERRAFORM_CLIENT_ID, KEYCLOAK_TERRAFORM_CLIENT_SECRET
          script: | 
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "DOCKER_REGISTRY: $DOCKER_REGISTRY"
            echo "CONTAINER_NAME: $CONTAINER_NAME"
            echo "KEYCLOAK_HOSTNAME_URL: $KEYCLOAK_HOSTNAME_URL"
            echo "KEYCLOAK_TARGET_REALM: $KEYCLOAK_TARGET_REALM"
            echo "DOMAIN_NAME: $DOMAIN_NAME"
            # Remove all older images not in use, etc.
            echo y | docker system prune -a

            # Login to the registry
            docker login $DOCKER_REGISTRY

            # Pull the latest Docker image
            docker pull $DOCKER_IMAGE

            # Stop and remove any existing Keycloak containers
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Run Keycloak with HTTPS configured
            echo "Starting Keycloak with HTTPS..."
            docker run -d --name $CONTAINER_NAME \
              -p 80:8080 \
              -p 443:8443 \
              -v /etc/letsencrypt/live/$DOMAIN_NAME:/etc/x509/https \
              -v /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem:/etc/x509/https/fullchain.pem:ro \
              -v /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem:/etc/x509/https/privkey.pem:ro \
              -e KC_HTTPS_CERTIFICATE_FILE=/etc/x509/https/fullchain.pem \
              -e KC_HTTPS_CERTIFICATE_KEY_FILE=/etc/x509/https/privkey.pem \
              -e KC_BOOTSTRAP_ADMIN_USERNAME=admin \
              -e KC_BOOTSTRAP_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              -e KEYCLOAK_ADMIN=admin \
              -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              -e KC_HOSTNAME_STRICT_HTTPS=true \
              -e KC_HOSTNAME_URL=$KEYCLOAK_HOSTNAME_URL \
              -e KEYCLOAK_TARGET_REALM=$KEYCLOAK_TARGET_REALM \
              -e KEYCLOAK_TERRAFORM_CLIENT_ID=$KEYCLOAK_TERRAFORM_CLIENT_ID \
              -e KEYCLOAK_TERRAFORM_CLIENT_SECRET=$KEYCLOAK_TERRAFORM_CLIENT_SECRET \
              -e KC_HTTPS_REDIRECT_ENABLED=true \
              -e KC_HTTP_CORS=true \
              -e KC_PROXY=edge
              $DOCKER_IMAGE start-dev \
                  --https-key-store-file=/etc/x509/https/privkey.pem \
                  --https-key-store-password=password \
                  --import-realm \
                  --hostname=kc.zedwerks.com

      - name: Wait for Keycloak to start
        uses: appleboy/ssh-action@v1.1.0
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: CONTAINER_NAME
          script: |
            echo "Waiting for Keycloak to start..."
            # Function to check Keycloak readiness
            function wait_for_keycloak_ready() {
              MAX_RETRIES=30
              SLEEP_TIME=10
              URL="http://localhost:80/realms/master/.well-known/openid-configuration"
              RETRIES=0
              until [[ $(curl -s -o /dev/null -w '%{http_code}' $URL) == 200 ]]; do
                RETRIES=$((RETRIES+1))
                if [ "$RETRIES" -ge "$MAX_RETRIES" ]; then
                  echo "Keycloak readiness check failed after $RETRIES retries. Exiting."
                  exit 1
                fi
                echo "Waiting for Keycloak to be ready... ($RETRIES/$MAX_RETRIES)"
                sleep $SLEEP_TIME
              done
            }
            # Call the function to wait for Keycloak to be ready
            wait_for_keycloak_ready
            docker ps | grep $CONTAINER_NAME
        timeout-minutes: 5

      - name: Add realm-admin for terraform client
        uses: appleboy/ssh-action@v1.1.0
        env:
          KEYCLOAK_TERRAFORM_CLIENT_ID: ${{ env.KEYCLOAK_TERRAFORM_CLIENT_ID }}
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_TARGET_REALM: ${{ env.KEYCLOAK_TARGET_REALM }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          SERVER_URL: 'http://localhost:8080'
        with:
            host: ${{ env.DROPLET_IP }}
            username: root
            key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
            envs: SERVER_URL,CONTAINER_NAME,KEYCLOAK_TERRAFORM_CLIENT_ID,KEYCLOAK_ADMIN,KEYCLOAK_ADMIN_PASSWORD,KEYCLOAK_TARGET_REALM
            script: |
              SERVICE_ACCOUNT="service-account-$KEYCLOAK_TERRAFORM_CLIENT_ID"
              echo "Setting up realm-admin for the terraform client..."
              docker exec -t \
              -e SERVER_URL=$SERVER_URL \
              -e SERVICE_ACCOUNT=$SERVICE_ACCOUNT \
              -e KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN \
              -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              $CONTAINER_NAME bash /opt/keycloak/bin/kcadm.sh config credentials --server $SERVER_URL --realm master --user $KEYCLOAK_ADMIN --password $KEYCLOAK_ADMIN_PASSWORD
              docker exec -t \
              -e KEYCLOAK_TARGET_REALM=$KEYCLOAK_TARGET_REALM \
              -e SERVICE_ACCOUNT=service-account-$KEYCLOAK_TERRAFORM_CLIENT_ID \
              -e KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN \
              -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              $CONTAINER_NAME bash /opt/keycloak/bin/kcadm.sh add-roles --uusername $SERVICE_ACCOUNT --cclientid realm-management --rolename realm-admin -r $KEYCLOAK_TARGET_REALM

