name: Renew Certificate for Keycloak HTTPS
on:
  schedule:
    - cron: '0 3 20 4,7,10 *'
  workflow_dispatch:
    inputs:
      target_environment:
        description: "Target Environment"
        required: false
        default: "demo"  
env:
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
  CONTAINER_NAME: keycloak-smart-fhir
  DROPLET_NAME: smart-on-fhir
  DROPLET_REGION: tor1
  DROPLET_SIZE: s-1vcpu-1gb
  DROPLET_IP: "blank"
  droplet_exists: "false"

jobs:
   renew:
    name: Renew HTTPS certificate on Digital Ocean Droplet
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ inputs.target_environment }}
    
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get Droplet IP
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          DROPLET_IP=$(doctl compute droplet list --no-header --format Name,PublicIPv4 | grep "$DROPLET_NAME" | awk '{print $2}')
          echo "DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Set environment
        run: |
          environment="${{ github.event.inputs.target_environment || 'demo' }}" 
          echo "Deploying to ${environment} environment"

      - name: Install Certbot on Droplet
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            # Install Certbot for SSL certificate generation (if using Let's Encrypt)
            if ! command -v certbot &> /dev/null
            then
              apt-get update
              apt-get install -y certbot
            fi

      - name: Stop Keycloak with HTTPS
        uses: appleboy/ssh-action@v1.1.0
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: CONTAINER_NAME
          script: | 
            # Stop existing Keycloak containers
            docker stop $CONTAINER_NAME || true
            docker ps

      - name: Renew Certificate for HTTPS
        uses: appleboy/ssh-action@v1.1.0
        env: 
          DOMAIN_NAME: ${{ env.DOMAIN_NAME }}
          EMAIL: brad@zedwerks.com
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: DOMAIN_NAME, EMAIL
          script: |
            # poke the firewall of the droplet
            ufw allow 80
            ufw allow 443

            # Generate SSL certificate using Certbot
            certbot renew --quiet

      - name: Start Keycloak with renewed Certificate for HTTPS
        uses: appleboy/ssh-action@v1.1.0
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: CONTAINER_NAME
          script: | 
            docker start $CONTAINER_NAME 

      - name: Wait for Keycloak to start
        uses: appleboy/ssh-action@v1.1.0
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          envs: CONTAINER_NAME
          script: |
            echo "Waiting for Keycloak to start..."
            # Function to check Keycloak readiness
            function wait_for_keycloak_ready() {
              MAX_RETRIES=30
              SLEEP_TIME=10
              URL="http://localhost:80/realms/master/.well-known/openid-configuration"
              RETRIES=0
              until [[ $(curl -s -o /dev/null -w '%{http_code}' $URL) == 200 ]]; do
                RETRIES=$((RETRIES+1))
                if [ "$RETRIES" -ge "$MAX_RETRIES" ]; then
                  echo "Keycloak readiness check failed after $RETRIES retries. Exiting."
                  exit 1
                fi
                echo "Waiting for Keycloak to be ready... ($RETRIES/$MAX_RETRIES)"
                sleep $SLEEP_TIME
              done
            }
            # Call the function to wait for Keycloak to be ready
            wait_for_keycloak_ready
            docker ps | grep $CONTAINER_NAME
        timeout-minutes: 5

      
